#!/bin/bash
#
# OnLog Sensor Message Synchronization Setup Script
# Automated setup and configuration for message synchronization features
#

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CHIRPSTACK_DIR="$(dirname "$SCRIPT_DIR")"
PROJECT_DIR="$(dirname "$CHIRPSTACK_DIR")"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration defaults
DEFAULT_QOS_LEVEL=1
DEFAULT_BALANCE_CHECK_INTERVAL=300
DEFAULT_EXPECTED_INTERVAL=60

show_banner() {
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                   OnLog Sensor Sync Setup                    ‚ïë"
    echo "‚ïë           Message Synchronization Configuration              ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïõ"
    echo -e "${NC}"
}

show_usage() {
    echo "Usage: $0 [command]"
    echo ""
    echo "Commands:"
    echo "  install       Install and configure sensor synchronization"
    echo "  configure     Configure synchronization settings"
    echo "  verify        Verify installation and configuration"
    echo "  update        Update configuration files"
    echo "  status        Show current setup status"
    echo "  uninstall     Remove synchronization features"
    echo ""
    echo "Examples:"
    echo "  $0 install        # Complete installation"
    echo "  $0 configure      # Interactive configuration"
    echo "  $0 verify         # Check if everything is working"
}

check_prerequisites() {
    echo -e "${BLUE}üîç Checking Prerequisites${NC}"
    echo "============================"
    
    local missing_deps=()
    
    # Check Docker
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker is not installed${NC}"
        missing_deps+=("docker")
    else
        echo -e "${GREEN}‚úÖ Docker is available${NC}"
    fi
    
    # Check Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        echo -e "${RED}‚ùå Docker Compose is not installed${NC}"
        missing_deps+=("docker-compose")
    else
        echo -e "${GREEN}‚úÖ Docker Compose is available${NC}"
    fi
    
    # Check directory structure
    if [ ! -f "$CHIRPSTACK_DIR/docker-compose.yml" ]; then
        echo -e "${RED}‚ùå ChirpStack docker-compose.yml not found${NC}"
        missing_deps+=("chirpstack-config")
    else
        echo -e "${GREEN}‚úÖ ChirpStack configuration found${NC}"
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        echo -e "${RED}‚ùå Missing dependencies: ${missing_deps[*]}${NC}"
        echo ""
        echo "Please install missing dependencies:"
        for dep in "${missing_deps[@]}"; do
            case $dep in
                "docker")
                    echo "  - Install Docker: https://docs.docker.com/install/"
                    ;;
                "docker-compose")
                    echo "  - Install Docker Compose: https://docs.docker.com/compose/install/"
                    ;;
                "chirpstack-config")
                    echo "  - Ensure you're running this from the correct directory"
                    ;;
            esac
        done
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ All prerequisites satisfied${NC}"
    echo ""
}

configure_synchronization() {
    echo -e "${BLUE}‚öôÔ∏è Configuring Synchronization Settings${NC}"
    echo "========================================"
    
    local config_file="$CHIRPSTACK_DIR/logger/sync_config.conf"
    
    echo "Current configuration location: $config_file"
    echo ""
    
    # Get user preferences
    read -p "Expected message interval for devices (seconds) [$DEFAULT_EXPECTED_INTERVAL]: " expected_interval
    expected_interval=${expected_interval:-$DEFAULT_EXPECTED_INTERVAL}
    
    read -p "MQTT QoS level (0=fire-and-forget, 1=acknowledged, 2=exactly-once) [$DEFAULT_QOS_LEVEL]: " qos_level
    qos_level=${qos_level:-$DEFAULT_QOS_LEVEL}
    
    read -p "Balance check interval (seconds) [$DEFAULT_BALANCE_CHECK_INTERVAL]: " balance_interval
    balance_interval=${balance_interval:-$DEFAULT_BALANCE_CHECK_INTERVAL}
    
    read -p "Balance threshold (0.1 = 10% deviation triggers warning) [0.1]: " balance_threshold
    balance_threshold=${balance_threshold:-0.1}
    
    # Update configuration file
    cat > "$config_file" << EOF
# Sensor Message Synchronization Configuration
# Generated by setup script on $(date)

[mqtt]
qos_level = $qos_level
retain_messages = false
keepalive_interval = 60

[monitoring]
balance_check_interval = $balance_interval
balance_threshold = $balance_threshold
device_active_timeout = 300
device_stale_timeout = 3600

[synchronization]
expected_message_interval = $expected_interval
timing_tolerance = 10
enable_auto_correction = true
max_missed_messages = 3

[database]
db_path = "/data/sensor_logs.db"
enable_wal_mode = true
maintenance_interval = 86400

[logging]
log_level = "INFO"
enable_device_tracking = true
enable_balance_logging = true

[alerts]
enable_alerts = false
critical_imbalance_threshold = 0.25
warning_imbalance_threshold = 0.15
alert_cooldown = 1800
EOF
    
    echo -e "${GREEN}‚úÖ Configuration updated${NC}"
    echo ""
    echo "Configuration summary:"
    echo "  - Expected interval: ${expected_interval}s"
    echo "  - QoS level: $qos_level"
    echo "  - Balance check interval: ${balance_interval}s"
    echo "  - Balance threshold: ${balance_threshold}"
    echo ""
}

create_data_directories() {
    echo -e "${BLUE}üìÅ Creating Data Directories${NC}"
    echo "============================="
    
    local data_dirs=(
        "/mnt/nvme/infra/sqlite"
        "/mnt/nvme/chirpstack/mosquitto/data"
        "/mnt/nvme/chirpstack/mosquitto/log"
    )
    
    for dir in "${data_dirs[@]}"; do
        if [ ! -d "$dir" ]; then
            echo "Creating directory: $dir"
            sudo mkdir -p "$dir"
            sudo chown -R $USER:$USER "$dir" 2>/dev/null || echo "  (Note: Could not change ownership, may need sudo)"
        else
            echo "Directory exists: $dir"
        fi
    done
    
    echo -e "${GREEN}‚úÖ Data directories ready${NC}"
    echo ""
}

install_synchronization() {
    echo -e "${BLUE}üöÄ Installing Sensor Message Synchronization${NC}"
    echo "==============================================="
    
    check_prerequisites
    create_data_directories
    configure_synchronization
    
    echo -e "${BLUE}üîß Building and Starting Services${NC}"
    echo "==================================="
    
    cd "$CHIRPSTACK_DIR"
    
    # Build the logger with new features
    echo "Building enhanced MQTT logger..."
    docker-compose build mqtt-logger
    
    # Start the logger service
    echo "Starting MQTT logger service..."
    docker-compose up -d mqtt-logger
    
    # Wait a moment for startup
    sleep 3
    
    # Check if service started successfully
    if docker ps | grep -q mqtt-logger; then
        echo -e "${GREEN}‚úÖ MQTT Logger service started successfully${NC}"
    else
        echo -e "${RED}‚ùå Failed to start MQTT Logger service${NC}"
        echo "Check logs with: docker logs mqtt-logger"
        exit 1
    fi
    
    # Ensure other required services are running
    echo "Ensuring required services are running..."
    docker-compose up -d mosquitto postgres redis
    
    echo ""
    echo -e "${GREEN}üéâ Installation Complete!${NC}"
    echo ""
    echo "Next steps:"
    echo "  1. Monitor device status: $SCRIPT_DIR/monitor.sh dashboard"
    echo "  2. Check balance: $SCRIPT_DIR/monitor.sh balance"
    echo "  3. View logs: $SCRIPT_DIR/monitor.sh logs"
    echo ""
    echo "For help: $SCRIPT_DIR/monitor.sh help"
}

verify_installation() {
    echo -e "${BLUE}üîç Verifying Installation${NC}"
    echo "=========================="
    
    local issues=()
    
    # Check if logger container is running
    if docker ps | grep -q mqtt-logger; then
        echo -e "${GREEN}‚úÖ MQTT Logger container is running${NC}"
    else
        echo -e "${RED}‚ùå MQTT Logger container is not running${NC}"
        issues+=("logger-not-running")
    fi
    
    # Check if database is accessible
    if docker exec mqtt-logger python -c "import sqlite3; sqlite3.connect('/data/sensor_logs.db')" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Database is accessible${NC}"
    else
        echo -e "${RED}‚ùå Database is not accessible${NC}"
        issues+=("database-not-accessible")
    fi
    
    # Check if MQTT broker is reachable
    if docker exec mqtt-logger python -c "import paho.mqtt.client as mqtt; c = mqtt.Client(); c.connect('mosquitto', 1883, 60)" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ MQTT broker is reachable${NC}"
    else
        echo -e "${RED}‚ùå MQTT broker is not reachable${NC}"
        issues+=("mqtt-not-reachable")
    fi
    
    # Check configuration file
    if [ -f "$CHIRPSTACK_DIR/logger/sync_config.conf" ]; then
        echo -e "${GREEN}‚úÖ Configuration file exists${NC}"
    else
        echo -e "${RED}‚ùå Configuration file missing${NC}"
        issues+=("config-missing")
    fi
    
    # Check monitoring scripts
    if [ -x "$SCRIPT_DIR/monitor.sh" ]; then
        echo -e "${GREEN}‚úÖ Monitoring script is executable${NC}"
    else
        echo -e "${RED}‚ùå Monitoring script is not executable${NC}"
        issues+=("monitor-script-not-executable")
    fi
    
    echo ""
    
    if [ ${#issues[@]} -eq 0 ]; then
        echo -e "${GREEN}üéâ Installation verification passed!${NC}"
        echo ""
        echo "System is ready for sensor message synchronization monitoring."
        echo "Use '$SCRIPT_DIR/monitor.sh dashboard' to view device status."
    else
        echo -e "${RED}‚ùå Installation verification failed${NC}"
        echo ""
        echo "Issues found:"
        for issue in "${issues[@]}"; do
            case $issue in
                "logger-not-running")
                    echo "  - Start logger: cd $CHIRPSTACK_DIR && docker-compose up -d mqtt-logger"
                    ;;
                "database-not-accessible")
                    echo "  - Check data directory permissions: ls -la /mnt/nvme/infra/sqlite"
                    ;;
                "mqtt-not-reachable")
                    echo "  - Start MQTT broker: cd $CHIRPSTACK_DIR && docker-compose up -d mosquitto"
                    ;;
                "config-missing")
                    echo "  - Run configuration: $0 configure"
                    ;;
                "monitor-script-not-executable")
                    echo "  - Fix permissions: chmod +x $SCRIPT_DIR/monitor.sh"
                    ;;
            esac
        done
        exit 1
    fi
}

show_status() {
    echo -e "${BLUE}üìä Current Setup Status${NC}"
    echo "======================="
    
    # Check files
    echo "Configuration Files:"
    echo "  sync_config.conf: $([ -f "$CHIRPSTACK_DIR/logger/sync_config.conf" ] && echo "‚úÖ exists" || echo "‚ùå missing")"
    echo "  docker-compose.yml: $([ -f "$CHIRPSTACK_DIR/docker-compose.yml" ] && echo "‚úÖ exists" || echo "‚ùå missing")"
    echo "  monitor.sh: $([ -x "$SCRIPT_DIR/monitor.sh" ] && echo "‚úÖ executable" || echo "‚ùå not executable")"
    
    echo ""
    echo "Services:"
    if command -v docker &> /dev/null; then
        docker-compose -f "$CHIRPSTACK_DIR/docker-compose.yml" ps mqtt-logger mosquitto 2>/dev/null || echo "  Could not check services"
    else
        echo "  Docker not available"
    fi
    
    echo ""
    echo "Data Directories:"
    echo "  SQLite data: $([ -d "/mnt/nvme/infra/sqlite" ] && echo "‚úÖ exists" || echo "‚ùå missing")"
    echo "  MQTT logs: $([ -d "/mnt/nvme/chirpstack/mosquitto/log" ] && echo "‚úÖ exists" || echo "‚ùå missing")"
}

uninstall_synchronization() {
    echo -e "${YELLOW}‚ö†Ô∏è Uninstalling Sensor Message Synchronization${NC}"
    echo "==============================================="
    
    read -p "This will remove synchronization features but keep your data. Continue? (y/N): " -n 1 -r
    echo
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Uninstallation cancelled"
        exit 0
    fi
    
    cd "$CHIRPSTACK_DIR"
    
    # Stop and remove the enhanced logger
    echo "Stopping enhanced MQTT logger..."
    docker-compose stop mqtt-logger
    docker-compose rm -f mqtt-logger
    
    # Restore original logger configuration (basic version)
    echo "Restoring basic logger configuration..."
    
    # This would require creating a backup/restore mechanism
    echo -e "${YELLOW}‚ö†Ô∏è Manual restoration required${NC}"
    echo "Please restore the original logger configuration manually"
    echo "or re-run the basic setup from the repository"
    
    echo -e "${GREEN}‚úÖ Uninstallation complete${NC}"
}

main() {
    show_banner
    
    case "${1:-}" in
        "install")
            install_synchronization
            ;;
        "configure")
            configure_synchronization
            ;;
        "verify")
            verify_installation
            ;;
        "update")
            configure_synchronization
            echo "Configuration updated. Restart services with:"
            echo "  cd $CHIRPSTACK_DIR && docker-compose restart mqtt-logger"
            ;;
        "status")
            show_status
            ;;
        "uninstall")
            uninstall_synchronization
            ;;
        "help"|"-h"|"--help")
            show_usage
            ;;
        "")
            show_usage
            ;;
        *)
            echo -e "${RED}‚ùå Unknown command: $1${NC}"
            echo ""
            show_usage
            exit 1
            ;;
    esac
}

main "$@"